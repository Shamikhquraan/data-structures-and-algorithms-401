/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;


public class AppTest {
    @Test void PushStack() {
        Stack stack1 = new Stack();
        stack1.push(10);
        assertFalse(stack1.isEmpty());
    }
    @Test void canPushMultipleToStack() {
        Stack stack1 = new Stack();
        stack1.push(4);
        stack1.push(9);
        stack1.push(2);
        stack1.push(10);
        int topOfStack = (int) stack1.peek();
        assertEquals(10, topOfStack);
    }

    @Test void popAllElementStack() {
        Stack stack1 = new Stack();
        stack1.push(10);
        stack1.push(8);
        stack1.pop();
        stack1.pop();
        assertTrue(stack1.isEmpty());
    }

    @Test void popPeekStack() {
        Stack stack1 = new Stack();
        stack1.push(3);
        stack1.push(14);
        stack1.push(6);
        stack1.pop();
        int topOfStack = (int) stack1.peek();
        assertEquals(14, topOfStack);
    }


    @Test void enqueueMoreThanOne() {
        Queue queueString = new Queue();
        queueString.enqueue("KFC");
        queueString.enqueue("MAC");
        queueString.enqueue("SHAWARMAJI");
        String frontQueue = (String) queueString.peek();
        assertEquals("KFC", frontQueue);
    }

    @Test void firstDequeue() {
        Queue queueString = new Queue();
        queueString.enqueue("Amman");
        queueString.enqueue("Irbid");
        queueString.enqueue("Salt");
        String deqValue = (String) queueString.dequeue();
        assertEquals("Amman", deqValue);
    }

    @Test void ifCanEnqueue() {
        Queue normQueue = new Queue();
        normQueue.enqueue("anyThing");
        assertFalse(normQueue.isEmpty());
    }

    @Test void emptyByDequeue() {
        Queue normQueue = new Queue();
        normQueue.enqueue("Orange");
        normQueue.enqueue("Blue");
        normQueue.dequeue();
        normQueue.dequeue();
        assertTrue(normQueue.isEmpty());
    }

    @Test void createEmptyQueue() {
        Queue normQueue = new Queue();
        assertTrue(normQueue.isEmpty());
    }

    @Test public void testEnqueueQueue() {
        PseudoQueue<Integer> PseudoQueue1 = new PseudoQueue<>();

        PseudoQueue1.enQueue(10);
        PseudoQueue1.enQueue(9);
        PseudoQueue1.enQueue(5);
        PseudoQueue1.enQueue(6);
        PseudoQueue1.enQueue(3);
        PseudoQueue1.enQueue(1);
        int size = PseudoQueue1.getSize();
        int expectedSize = 6;
        assertEquals(expectedSize,size);
    }
    @Test public void testDequeueQueue() {
        PseudoQueue<Integer> PseudoQueue1 = new PseudoQueue<>();

        PseudoQueue1.enQueue(6);
        PseudoQueue1.enQueue(9);
        PseudoQueue1.enQueue(5);
        PseudoQueue1.enQueue(6);
        PseudoQueue1.enQueue(10);
        int value = PseudoQueue1.deQueue();
        int expectedValue = 6;
        int size = PseudoQueue1.getSize();
        int expectedSize = 4;
        assertEquals(size,expectedSize);
        assertEquals(expectedValue,value);
    }

    @Test public void testPeekIntoAPseudoQueue() {
        PseudoQueue<Integer> PseudoQueue1 = new PseudoQueue<>();

        PseudoQueue1.enQueue(3);
        PseudoQueue1.enQueue(9);
        PseudoQueue1.enQueue(5);
        PseudoQueue1.enQueue(6);
        PseudoQueue1.enQueue(10);
        int value = PseudoQueue1.peek();
        int expectedValue = 3;

        assertEquals(expectedValue,value);

    }
    @Test public void testInstantiateAnEmptyPseudoQueue() {
        PseudoQueue<Integer> PseudoQueue1 = new PseudoQueue<>();
        int size = PseudoQueue1.getSize();
        int expectedSize = 0;
        assertEquals(expectedSize,size);
        String output = PseudoQueue1.toString();
        String expectedOutput = "null";
        assertEquals(expectedOutput,output);
    }


}
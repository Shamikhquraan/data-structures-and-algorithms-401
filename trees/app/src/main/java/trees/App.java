/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

import static trees.BinaryTree.breadthFirst;

public class App {
    public static void main(String[] args) {
        //output inorder post contain
        BinarySearchTree treeForT=new BinarySearchTree();
        treeForT.insert(20);
        treeForT.insert(60);
        treeForT.insert(80);
        treeForT.insert(30);
        treeForT.insert(90);
        treeForT.insert(45);
//        System.out.println(treeForT.contains(20));
        System.out.println(treeForT.preOrder(treeForT.root)+" preOrder");
        System.out.println(treeForT.inOrder(treeForT.root)+" inOrder");
        System.out.println(treeForT.postOrder(treeForT.root)+" postOrder");

        //to get the max value from Tree , it will give u 90 .
        System.out.println("Max is :"+treeForT.getMax());


        System.out.println("using breadthFirst function ," +
                " list of all values in the tree, in the order they were encountered :");

        //this is the array ÙˆReturn: list of all values in the tree, in the order they were encountered
        System.out.println(breadthFirst(treeForT));
        //17
        System.out.println(FizzBuzzTree.fizzBuzzTree(treeForT));



    }
    public static ArrayList   breadthFirst(BinarySearchTree tree) {
        Queue<Node> breadth = new LinkedList<>();
        ArrayList treeList=new ArrayList();
        breadth.add(tree.root);
        while (breadth.peek() != null) {
            Node front = breadth.remove();
            treeList.add(front.value);
            if (front.left != null)
                breadth.add(front.left);
            if (front.right != null)
                breadth.add(front.right);
        }

        return treeList;
    }
}